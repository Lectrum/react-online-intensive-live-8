// Core
import React, { Component } from 'react';
import { render } from 'react-dom';
import { log } from '../helpers';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–∫–æ—Ä–æ–±–∫–∞, —É–º–µ–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∂–∞–π
class Storage extends Component {
    constructor() {
        super();

        log('CHILD ‚Üí constructor', 'wheat');
    }

    state = {
        apples:  0,
        carrots: 5,
    };

    static getDerivedStateFromProps(nextProps, prevState) {
        log('CHILD ‚Üí static getDerivedStateFromProps', 'orange');

        if (nextProps.apples > prevState.apples) {
            return {
                apples: nextProps.apples,
            };
        }

        return null;
    }

    componentDidMount() {
        log('CHILD ‚Üí componentDidMount', 'lime');
    }

    shouldComponentUpdate(nextProps, nextState) {
        log('CHILD ‚Üí shouldComponentUpdate', 'olive');

        return this.props !== nextProps || this.state !== nextState;
    }

    getSnapshotBeforeUpdate() {
        log('CHILD ‚Üí getSnapshotBeforeUpdate', 'coral');

        return null;
    }

    componentDidUpdate() {
        log('CHILD ‚Üí componentDidUpdate', 'yellow');
    }

    componentWillUnmount() {
        log('CHILD ‚Üí componentWillUnmount', 'skyblue');
    }

    _yieldCarrot = () => this.setState(({ carrots }) => ({ carrots: carrots + 1 }));

    render() {
        const { apples, carrots } = this.state;

        log('CHILD ‚Üí render', 'red');

        const carrotsJSX = Array(carrots).fill('ü•ï');
        const applesJSX = Array(apples).fill('üçé');

        return (
            <>
                <h1>üì¶ –ö–æ—Ä–æ–±–∫–∞ —Å –æ–≤–æ—â–∞–º–∏ –∏ —Ñ—Ä—É–∫—Ç–∞–º–∏.</h1>
                <h3>–£ —Ç–µ–±—è {apples} —è–±–ª–æ–∫.</h3>
                <h3>–£ —Ç–µ–±—è {carrots} –º–æ—Ä–∫–æ–≤–∏.</h3>
                <p>–ú–æ—Ä–∫–æ–≤–∏: {carrotsJSX}</p>
                <p>–Ø–±–ª–æ–∫: {applesJSX}</p>
                <button onClick = { this._yieldCarrot }>–°–æ–±—Ä–∞—Ç—å ü•ï</button>
            </>
        );
    }
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-—Ñ–µ—Ä–º–∞, –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π
class Farm extends Component {
    constructor() {
        super();

        log('PARENT ‚Üí constructor', 'wheat');
    }

    state = {
        apples:        5,
        isStorageOpen: true,
    };

    static getDerivedStateFromProps() {
        log('PARENT ‚Üí static getDerivedStateFromProps', 'orange');

        return null;
    }

    componentDidMount() {
        log('PARENT ‚Üí componentDidMount', 'lime');
    }

    shouldComponentUpdate(nextProps, nextState) {
        log('PARENT ‚Üí shouldComponentUpdate', 'olive');

        return this.props !== nextProps || this.state !== nextState;
    }

    getSnapshotBeforeUpdate() {
        log('PARENT ‚Üí getSnapshotBeforeUpdate', 'coral');

        return null;
    }

    componentDidUpdate() {
        log('PARENT ‚Üí componentDidUpdate', 'yellow');
    }

    _yieldApples = () => this.setState(({ apples }) => ({ apples: apples + 1 }));

    _toggleStorage = () => this.setState(({ isStorageOpen }) => ({
        isStorageOpen: !isStorageOpen,
    }));

    render() {
        const { apples, isStorageOpen } = this.state;
        const applesJSX = Array(apples).fill('üçé');

        log('PARENT ‚Üí render', 'red');

        return (
            <section className = 'example'>
                <h1>üë©üèº‚Äçüåæ –ü—Ä–∏–≤–µ—Ç, —Ñ–µ—Ä–º–µ—Ä –£–æ–ª—Ç–µ—Ä –£–∞–π—Ç.</h1>
                <p>–Ø–±–ª–æ–∫: {applesJSX}</p>
                <button onClick = { this._toggleStorage }>
                    –û—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å üì¶
                </button>
                <button onClick = { this._yieldApples }>–°–æ–±—Ä–∞—Ç—å üçé</button>
                {isStorageOpen && <Storage apples = { apples } />}
            </section>
        );
    }
}

render(<Farm />, document.getElementById('root'));
